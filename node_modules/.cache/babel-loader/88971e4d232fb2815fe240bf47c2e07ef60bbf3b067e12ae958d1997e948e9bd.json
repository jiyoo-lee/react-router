{"ast":null,"code":"var _jsxFileName = \"/Users/jiyoo/Desktop/react-router/src/component/DiaryList.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortOptionList = [{\n  value: \"latest\",\n  name: \"최신순\"\n}, {\n  value: \"oldest\",\n  name: \"오래된 순\"\n}];\nconst filterOptionList = [{\n  value: \"all\",\n  name: \"전부 다\"\n}, {\n  value: \"good\",\n  name: \"좋은 감정만\"\n}, {\n  value: \"bad\",\n  name: \"안좋은 감정만\"\n}];\nconst ControlMenu = _ref => {\n  let {\n    value,\n    onChange,\n    optionList\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"select\", {\n    value: value,\n    onChange: e => onChange(e.target.value),\n    children: optionList.map((it, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: it.value,\n      children: it.name\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n_c = ControlMenu;\nconst DiaryList = _ref2 => {\n  _s();\n  let {\n    diaryList\n  } = _ref2;\n  const [sortType, setSortType] = useState(`latest`);\n  const [filter, setFilter] = useState(\"all\");\n  const getProcessedDiaryList = () => {\n    const filterCallBack = item => {\n      if (filter === 'good') {\n        return parseInt(item.emotion) > 3;\n      } else {\n        return parseInt(item.emotion) <= 3;\n      }\n    };\n    const compare = (a, b) => {\n      if (sortType === 'latest') {\n        return parseInt(b.date) - parseInt(a.date);\n      } else {\n        return parseInt(a.date) - parseInt(b.date);\n      }\n    };\n    const copyList = JSON.parse(JSON.stringify(diaryList));\n    const filteredList = filter === 'all' ? copyList : copyList.filter(it => filterCallBack(it));\n    const sortedList = filteredList.sort(compare);\n    return sortedList;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: sortType,\n      onChange: setSortType,\n      optionList: sortOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ControlMenu, {\n      value: filter,\n      onChange: setFilter,\n      optionList: filterOptionList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }, this), getProcessedDiaryList().map(it => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [it.content, \" \", it.emotion]\n    }, it.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(DiaryList, \"F/WAFQcGiGfDq2ZLksOpLjm7nWk=\");\n_c2 = DiaryList;\nDiaryList.defaultProps = {\n  diaryList: []\n};\nexport default DiaryList;\nvar _c, _c2;\n$RefreshReg$(_c, \"ControlMenu\");\n$RefreshReg$(_c2, \"DiaryList\");","map":{"version":3,"names":["useState","sortOptionList","value","name","filterOptionList","ControlMenu","onChange","optionList","e","target","map","it","idx","DiaryList","diaryList","sortType","setSortType","filter","setFilter","getProcessedDiaryList","filterCallBack","item","parseInt","emotion","compare","a","b","date","copyList","JSON","parse","stringify","filteredList","sortedList","sort","content","id","defaultProps"],"sources":["/Users/jiyoo/Desktop/react-router/src/component/DiaryList.js"],"sourcesContent":["import { useState } from \"react\";\n\nconst sortOptionList = [\n    {value: \"latest\", name: \"최신순\"},\n    {value: \"oldest\", name:\"오래된 순\"},\n];\n\nconst filterOptionList = [\n    {value: \"all\", name: \"전부 다\" },\n    {value: \"good\", name: \"좋은 감정만\"},\n    {value: \"bad\", name: \"안좋은 감정만\"},\n]\n\nconst ControlMenu = ({ value ,onChange , optionList }) => {\n    return (\n        <select value={value} onChange={(e) => onChange(e.target.value)}> \n        {optionList.map((it , idx) => (\n            <option key= {idx} value={it.value}> \n            {it.name}\n            </option>\n            ))}\n         </select>\n    );\n};\n\nconst DiaryList = ({ diaryList }) => {\n    const [sortType, setSortType] = useState(`latest`);\n    const [filter, setFilter] = useState(\"all\");\n\n    const getProcessedDiaryList = ()=> {\n        const filterCallBack = (item) => {\n            if(filter === 'good') {\n                return parseInt(item.emotion) > 3;\n            }else{\n                return parseInt(item.emotion) <= 3;\n                }\n            }\n        const compare = (a,b) => {\n            if(sortType === 'latest'){\n                return parseInt(b.date) - parseInt(a.date);\n            }else{\n                return parseInt(a.date) - parseInt(b.date);\n                }\n            }\n        const copyList = JSON.parse(JSON.stringify(diaryList));\n        const filteredList = filter === 'all' ? copyList : copyList.filter((it) => \n                                                                filterCallBack(it))\n\n        const sortedList = filteredList.sort(compare);\n        return sortedList;\n    };\n\n    return (\n    <div>\n        <ControlMenu \n        value={sortType}\n         onChange={setSortType}\n         optionList={sortOptionList}\n         />\n         <ControlMenu\n         value={filter}\n         onChange={setFilter}\n         optionList={filterOptionList}\n         />\n        {getProcessedDiaryList().map((it)=> (\n            <div key={it.id}>{it.content} {it.emotion}</div>\n        ))}\n    </div>\n    );\n} \n\nDiaryList.defaultProps = {\n    diaryList: [],\n}\n\nexport default DiaryList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}